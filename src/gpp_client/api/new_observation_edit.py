# Generated by ariadne-codegen
# Source: src/queries

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    CalculationState,
    CalibrationRole,
    CloudExtinctionPreset,
    EditType,
    Existence,
    GmosNorthBuiltinFpu,
    GmosNorthFilter,
    GmosNorthGrating,
    GmosSouthBuiltinFpu,
    GmosSouthFilter,
    GmosSouthGrating,
    ImageQualityPreset,
    Instrument,
    ObservingModeType,
    ScienceBand,
    ScienceMode,
    SkyBackground,
    TimingWindowInclusion,
    WaterVapor,
)


class NewObservationEdit(BaseModel):
    observation_edit: "NewObservationEditObservationEdit" = Field(
        alias="observationEdit"
    )


class NewObservationEditObservationEdit(BaseModel):
    edit_type: EditType = Field(alias="editType")
    observation_id: Any = Field(alias="observationId")
    value: Optional["NewObservationEditObservationEditValue"]


class NewObservationEditObservationEditValue(BaseModel):
    id: Any
    existence: Existence
    reference: Optional["NewObservationEditObservationEditValueReference"]
    calibration_role: Optional[CalibrationRole] = Field(alias="calibrationRole")
    instrument: Optional[Instrument]
    index: Any
    title: Any
    subtitle: Optional[Any]
    science_requirements: (
        "NewObservationEditObservationEditValueScienceRequirements"
    ) = Field(alias="scienceRequirements")
    science_band: Optional[ScienceBand] = Field(alias="scienceBand")
    workflow: Optional["NewObservationEditObservationEditValueWorkflow"]
    observing_mode: Optional["NewObservationEditObservationEditValueObservingMode"] = (
        Field(alias="observingMode")
    )
    constraint_set: "NewObservationEditObservationEditValueConstraintSet" = Field(
        alias="constraintSet"
    )
    timing_windows: List["NewObservationEditObservationEditValueTimingWindows"] = Field(
        alias="timingWindows"
    )
    target_environment: "NewObservationEditObservationEditValueTargetEnvironment" = (
        Field(alias="targetEnvironment")
    )


class NewObservationEditObservationEditValueReference(BaseModel):
    label: Any


class NewObservationEditObservationEditValueScienceRequirements(BaseModel):
    mode: Optional[ScienceMode]


class NewObservationEditObservationEditValueWorkflow(BaseModel):
    state: CalculationState


class NewObservationEditObservationEditValueObservingMode(BaseModel):
    instrument: Instrument
    mode: ObservingModeType
    gmos_north_long_slit: Optional[
        "NewObservationEditObservationEditValueObservingModeGmosNorthLongSlit"
    ] = Field(alias="gmosNorthLongSlit")
    gmos_south_long_slit: Optional[
        "NewObservationEditObservationEditValueObservingModeGmosSouthLongSlit"
    ] = Field(alias="gmosSouthLongSlit")


class NewObservationEditObservationEditValueObservingModeGmosNorthLongSlit(BaseModel):
    grating: GmosNorthGrating
    filter: Optional[GmosNorthFilter]
    fpu: GmosNorthBuiltinFpu
    central_wavelength: (
        "NewObservationEditObservationEditValueObservingModeGmosNorthLongSlitCentralWavelength"
    ) = Field(alias="centralWavelength")
    spatial_offsets: List[
        "NewObservationEditObservationEditValueObservingModeGmosNorthLongSlitSpatialOffsets"
    ] = Field(alias="spatialOffsets")


class NewObservationEditObservationEditValueObservingModeGmosNorthLongSlitCentralWavelength(
    BaseModel
):
    nanometers: Any


class NewObservationEditObservationEditValueObservingModeGmosNorthLongSlitSpatialOffsets(
    BaseModel
):
    arcseconds: Any


class NewObservationEditObservationEditValueObservingModeGmosSouthLongSlit(BaseModel):
    grating: GmosSouthGrating
    filter: Optional[GmosSouthFilter]
    fpu: GmosSouthBuiltinFpu
    central_wavelength: (
        "NewObservationEditObservationEditValueObservingModeGmosSouthLongSlitCentralWavelength"
    ) = Field(alias="centralWavelength")
    spatial_offsets: List[
        "NewObservationEditObservationEditValueObservingModeGmosSouthLongSlitSpatialOffsets"
    ] = Field(alias="spatialOffsets")


class NewObservationEditObservationEditValueObservingModeGmosSouthLongSlitCentralWavelength(
    BaseModel
):
    nanometers: Any


class NewObservationEditObservationEditValueObservingModeGmosSouthLongSlitSpatialOffsets(
    BaseModel
):
    arcseconds: Any


class NewObservationEditObservationEditValueConstraintSet(BaseModel):
    image_quality: ImageQualityPreset = Field(alias="imageQuality")
    cloud_extinction: CloudExtinctionPreset = Field(alias="cloudExtinction")
    sky_background: SkyBackground = Field(alias="skyBackground")
    water_vapor: WaterVapor = Field(alias="waterVapor")
    elevation_range: (
        "NewObservationEditObservationEditValueConstraintSetElevationRange"
    ) = Field(alias="elevationRange")


class NewObservationEditObservationEditValueConstraintSetElevationRange(BaseModel):
    air_mass: Optional[
        "NewObservationEditObservationEditValueConstraintSetElevationRangeAirMass"
    ] = Field(alias="airMass")
    hour_angle: Optional[
        "NewObservationEditObservationEditValueConstraintSetElevationRangeHourAngle"
    ] = Field(alias="hourAngle")


class NewObservationEditObservationEditValueConstraintSetElevationRangeAirMass(
    BaseModel
):
    min: Any
    max: Any


class NewObservationEditObservationEditValueConstraintSetElevationRangeHourAngle(
    BaseModel
):
    min_hours: Any = Field(alias="minHours")
    max_hours: Any = Field(alias="maxHours")


class NewObservationEditObservationEditValueTimingWindows(BaseModel):
    inclusion: TimingWindowInclusion
    start_utc: Any = Field(alias="startUtc")
    end: Optional[
        Annotated[
            Union[
                "NewObservationEditObservationEditValueTimingWindowsEndTimingWindowEndAt",
                "NewObservationEditObservationEditValueTimingWindowsEndTimingWindowEndAfter",
            ],
            Field(discriminator="typename__"),
        ]
    ]


class NewObservationEditObservationEditValueTimingWindowsEndTimingWindowEndAt(
    BaseModel
):
    typename__: Literal["TimingWindowEndAt"] = Field(alias="__typename")
    at_utc: Any = Field(alias="atUtc")


class NewObservationEditObservationEditValueTimingWindowsEndTimingWindowEndAfter(
    BaseModel
):
    typename__: Literal["TimingWindowEndAfter"] = Field(alias="__typename")
    after: "NewObservationEditObservationEditValueTimingWindowsEndTimingWindowEndAfterAfter"
    repeat: Optional[
        "NewObservationEditObservationEditValueTimingWindowsEndTimingWindowEndAfterRepeat"
    ]


class NewObservationEditObservationEditValueTimingWindowsEndTimingWindowEndAfterAfter(
    BaseModel
):
    seconds: Any


class NewObservationEditObservationEditValueTimingWindowsEndTimingWindowEndAfterRepeat(
    BaseModel
):
    period: "NewObservationEditObservationEditValueTimingWindowsEndTimingWindowEndAfterRepeatPeriod"
    times: Optional[Any]


class NewObservationEditObservationEditValueTimingWindowsEndTimingWindowEndAfterRepeatPeriod(
    BaseModel
):
    seconds: Any


class NewObservationEditObservationEditValueTargetEnvironment(BaseModel):
    asterism: List["NewObservationEditObservationEditValueTargetEnvironmentAsterism"]
    explicit_base: Optional[
        "NewObservationEditObservationEditValueTargetEnvironmentExplicitBase"
    ] = Field(alias="explicitBase")


class NewObservationEditObservationEditValueTargetEnvironmentAsterism(BaseModel):
    sidereal: Optional[
        "NewObservationEditObservationEditValueTargetEnvironmentAsterismSidereal"
    ]
    nonsidereal: Optional[
        "NewObservationEditObservationEditValueTargetEnvironmentAsterismNonsidereal"
    ]
    name: Any


class NewObservationEditObservationEditValueTargetEnvironmentAsterismSidereal(
    BaseModel
):
    ra: "NewObservationEditObservationEditValueTargetEnvironmentAsterismSiderealRa"
    dec: "NewObservationEditObservationEditValueTargetEnvironmentAsterismSiderealDec"
    epoch: Any


class NewObservationEditObservationEditValueTargetEnvironmentAsterismSiderealRa(
    BaseModel
):
    hms: Any


class NewObservationEditObservationEditValueTargetEnvironmentAsterismSiderealDec(
    BaseModel
):
    dms: Any


class NewObservationEditObservationEditValueTargetEnvironmentAsterismNonsidereal(
    BaseModel
):
    des: str


class NewObservationEditObservationEditValueTargetEnvironmentExplicitBase(BaseModel):
    ra: "NewObservationEditObservationEditValueTargetEnvironmentExplicitBaseRa"
    dec: "NewObservationEditObservationEditValueTargetEnvironmentExplicitBaseDec"


class NewObservationEditObservationEditValueTargetEnvironmentExplicitBaseRa(BaseModel):
    hms: Any


class NewObservationEditObservationEditValueTargetEnvironmentExplicitBaseDec(BaseModel):
    dms: Any


NewObservationEdit.model_rebuild()
NewObservationEditObservationEdit.model_rebuild()
NewObservationEditObservationEditValue.model_rebuild()
NewObservationEditObservationEditValueObservingMode.model_rebuild()
NewObservationEditObservationEditValueObservingModeGmosNorthLongSlit.model_rebuild()
NewObservationEditObservationEditValueObservingModeGmosSouthLongSlit.model_rebuild()
NewObservationEditObservationEditValueConstraintSet.model_rebuild()
NewObservationEditObservationEditValueConstraintSetElevationRange.model_rebuild()
NewObservationEditObservationEditValueTimingWindows.model_rebuild()
NewObservationEditObservationEditValueTimingWindowsEndTimingWindowEndAfter.model_rebuild()
NewObservationEditObservationEditValueTimingWindowsEndTimingWindowEndAfterRepeat.model_rebuild()
NewObservationEditObservationEditValueTargetEnvironment.model_rebuild()
NewObservationEditObservationEditValueTargetEnvironmentAsterism.model_rebuild()
NewObservationEditObservationEditValueTargetEnvironmentAsterismSidereal.model_rebuild()
NewObservationEditObservationEditValueTargetEnvironmentExplicitBase.model_rebuild()
